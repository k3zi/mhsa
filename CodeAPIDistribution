123123
FILES=" "
for f in `find $DIR -type f`; do FILES=$FILES$f" "; done

    for (int i = 0; i < nums.Length / 2; i++)
    {
        if (nums[i] <= nums.Length / 4)
        {
            sum[i] = start[i] + nums[(nums.Length-2)-4];
        }
        else
        {
            sum[i] = end[count] + nums[i - 1];
            count++;
        }
    }

  <!DOCTYPE html>
<html lang="en" class="no-js">
    <head>
        <title></title>
    <meta charset="utf-8" />

        <link href="assets/plugins/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">
        <link rel="stylesheet" href="assets/plugins/font-awesome/css/font-awesome.min.css">
        <link rel="stylesheet" href="assets/fonts/style.css">
        <link rel="stylesheet" href="assets/css/main.css">

        <style>
        .row {
    display: block;
    width: 100%;
    height: auto;
}
.button {
    display: inline-block;
    width: auto;
    height: auto;
    padding: 8px 15px;
    border: 1px solid #ccc;
    text-align: center;
    background: #eee;
}

.dropme {
    display: inline-block;
    width: auto;
    height: auto;
    overflow: hidden;
    margin-top: 20px;
}

.dropme div {
    display: block;
    width: 150px;
    border: 1px solid #ccc;
}

.highlight {
    padding: 5px;
    border: 2px dotted #fff09f;
    background: #fffef5;
}
    </style>

    </head>

     <body class="layout-boxed bg_style_2">

<div class="row">
    <div class="button" data-item="10">Item 10</div>
    <div class="button" data-item="11">Item 11</div>
    <div class="button" data-item="12">Item 12</div>
</div>

<div class="dropme">
    <div>List Item 1</div>
    <div>List Item 2</div>
    <div>List Item 3</div>
    <div>List Item 4</div>
    <div>List Item 5</div>

</div>
</body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
<script src="assets/plugins/bootstrap/js/bootstrap.min.js"></script>  
<script src="assets/js/main.js"></script> 

<!-- end: JAVASCRIPTS REQUIRED FOR THIS PAGE ONLY --> 
<script src="assets/js/jquery.sortable.js"></script>
<script>
$('.button').draggable({
    cursor: 'pointer',
    connectWith: '.dropme',
    helper: 'clone',
    opacity: 0.5,
    zIndex: 10
});

$('.dropme').sortable({
    connectWith: '.dropme',
    cursor: 'pointer'
}).droppable({
    accept: '.button',
    activeClass: 'highlight',
    drop: function(event, ui) {
        var $li = $('<div>').html('List ' + ui.draggable.html());
        $li.appendTo(this);
    }
})        

var data = $('.dropme').sortable('serialize');
        // POST to server using $.post or $.ajax
        $.ajax({
            data: data,
            type: 'GET',
            url: 'scripts/enroll_myt.php'
        });

var myDate new Date("2016-04-12T22:04:00.000Z")
console.log(myDate);
Wed Apr 13 2016 00:04:00 GMT+0200 (Central European Summertime)

Select  A.*
From    TableA  A
Where   Exists
(
    Select  *
    From    TableB  B
    Where   A.Id = B.Id
)

conda install -c https://conda.anaconda.org/anaconda scrapy
  File "<ipython-input-1-dd63679531fb>", line 1
    conda install -c https://conda.anaconda.org/anaconda scrapy
                ^
SyntaxError: invalid syntax

<cfftp  action = "getFile" 
server="ftp.cetip.com.br"
remotefile="/MediaCDI/20160412.txt"
localfile="#Session.wwwrootPath#Temp\cdi.txt">

class ModelCommand {
public:
    virtual ~ModelCommand() {};
};

class FolderCommand : public ModelCommand {
public:
    std::string text;
    unsigned width;
    bool isBackspace;

    FolderCommand(bool isBackspace, unsigned width, std::string text = "") : text(text), width(width), isBackspace(isBackspace) {}
};

class CModel {
private:
    string _folder;
public:
    void Update(std::shared_ptr<ModelCommand> &cmd);
};

function deleteAllReports() {
  var logger = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Unsampled Report Logs');
  var lastRow = logger.getLastRow();
  var unsampledReportsArray = logger.getRange(2, lastRow+1, 1, 1).getValues();
   var request = Analytics.Management.UnsampledReports.Delete({
      'accountId': '123456',
      'webPropertyId': 'UA-123456-1',
      'profileId': '7654321',
      'unsampledReportId': '1112223334111222333411'
    });
    
public class Getguid {

    public static void main(String[] args) throws Exception {
        BasicCookieStore cookieStore = new BasicCookieStore();
        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultCookieStore(cookieStore).build();
        try {
            HttpGet httpget = new HttpGet("LOGIN_URL_HERE");
            CloseableHttpResponse response1 = httpclient.execute(httpget);
            try {
                HttpEntity entity = response1.getEntity();

                System.out.println("Page Load Response Code: "+ response1.getStatusLine());
                EntityUtils.consume(entity);

                System.out.println("Page Load cookies:");
                List<Cookie> cookies = cookieStore.getCookies();
                if (cookies.isEmpty()) {
                    System.out.println("None");
                } else {
                    for (int i = 0; i < cookies.size(); i++) {
                        System.out.println("- " + cookies.get(i).toString());
                    }
                }
            } finally {
                response1.close();
            }

            HttpUriRequest login = RequestBuilder
                    .post()
                    .setUri(new URI("POST_LOGIN_URL_HERE"))
                    .addParameter("form_parameter", "username")
                    .addParameter("form_parameter", "password")
                    .build();
            CloseableHttpResponse response2 = httpclient.execute(login);
            try {
                HttpEntity entity = response2.getEntity();

                System.out.println("\nPage Login Response Code: "+ response2.getStatusLine());
                EntityUtils.consume(entity);

                System.out.println("Page Login cookies:");

                List<Cookie> cookies = cookieStore.getCookies();
                if (cookies.isEmpty()) {
                    System.out.println("None");
                } else {
                    for (int i = 0; i < cookies.size(); i++) {


                            PrintStream ps = null;
                            ps = new PrintStream(new FileOutputStream("C:\\Tools\\cookies.txt"));
                            ps.println("-" + cookies);

                        System.out.println("- " + cookies.get(i).toString());



                        // PrintStream out = new PrintStream(new
                        // FileOutputStream("C:\\Tools\\cookie_old.txt"));
                        // System.setOut(out);
                    }
                }
            } finally {
                response2.close();
                System.out.println("\ncookies copied to -> C:\\Tools\\cookies.txt");
            }
        } finally {
            httpclient.close();
        }
    }
    
find . -type f | xargs -n 1 -P 320 sh -c 'echo $0 `copy_to_distributed_table -C $0 table_name`
